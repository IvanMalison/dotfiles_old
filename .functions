function get_cols() {
    FS=' '
    while getopts "F:" OPTCHAR; do
        case $OPTCHAR in
            F)
                FS=$OPTARG
                ;;
        esac
    done
    shift $((OPTIND-1))
    awk -f "$HOME/.scripts/get_cols.awk" -v "cols=$*" -v "FS=$FS"
}

function find_all_ssh_agent_sockets() {
    find /tmp -type s -name agent.\* 2> /dev/null | grep '/tmp/ssh-.*/agent.*'
}

function set_ssh_agent_socket() {
    export SSH_AUTH_SOCK=$(find_all_ssh_agent_sockets | tail -n 1 | awk -F: '{print $1}')
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
	local arg=-sbh
    else
	local arg=-sh
    fi
    if [[ -n "$@" ]]; then
	du $arg -- "$@"
    else
	du $arg .[^.]* *
    fi
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
    sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# All the dig info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer
}

function parse_git_branch() {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

function parse_git_dirty() {
    [[ $(git status 2> /dev/null | tail -n1) != *"working directory clean"* ]] && echo "*"
}

function is_proddb() {
python - <<END
import os
import sys
import yaml


def is_proddb_from_topology_info(topology_info):
    for cluster_info in topology_info['topology']:
        if cluster_info['cluster'] == 'primary':
            return cluster_info['entries'][0]['host'] != '127.0.0.1'

def is_proddb_from_topology_filename(topology_filename):
    with open(topology_filename) as topology_file:
        return is_proddb_from_topology_info(yaml.load(topology_file))

def is_proddb():
    topology_filename =  os.environ.get('TOPOLOGY_FILE')
    if topology_filename:
        return is_proddb_from_topology_filename(topology_filename)
    return False


sys.exit(0 if is_proddb() else 1)
END
}

function sandbox_prompt_info() {
    if is_proddb
    then
        echo "\[\033[35m\](proddb sandbox)\[\033[00m\]"
    elif [ "$YELP_IN_SANDBOX" ];
    then
        echo "\[\033[35m\](sandbox)\[\033[00m\]"
    else
        echo "(no sandbox)"
    fi
}

export PS1="[\[\033[1;36m\]\u$@\[\033[00m\]@\h:\[\033[1;32m\]\w\[\033[00m\]]\[\033[1;33m\]\$GIT_PROMPT_BRANCH \[\033[ $(sandbox_prompt_info) \$ "
